<mah:MetroWindow x:Class="NedoPlayer.Views.MainWindow"
                 x:Name="ThisMainWindow"
                 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                 xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
                 xmlns:local="clr-namespace:NedoPlayer"
                 xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
                 xmlns:controls="clr-namespace:NedoPlayer.Controls"
                 xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
                 xmlns:p="clr-namespace:NedoPlayer.Resources"
                 mc:Ignorable="d" 
                 ResizeMode="CanResizeWithGrip"
                 Title="{x:Static p:Resource.AppName}" Height="600" Width="800" MinHeight="500" MinWidth="700"
                 BorderThickness="0"
                 MouseMove="MainWindow_OnMouseMove"
                 DataContext="{Binding MainViewModel, Source={StaticResource ViewModelLocator}}">
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closed">
            <i:InvokeCommandAction Command="{Binding CloseCommand}" CommandParameter="{Binding ElementName=ThisMainWindow}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <mah:MetroWindow.IconTemplate>
        <DataTemplate>
            <Image Source="../Resources/img/favicon.ico"
                   RenderOptions.BitmapScalingMode="HighQuality"
                   Margin="5" />
        </DataTemplate>
    </mah:MetroWindow.IconTemplate>
    <mah:MetroWindow.RightWindowCommands>
        <mah:WindowCommands>
            <TextBlock Margin="4" VerticalAlignment="Center"
                       Text="{Binding TrackTitle, Converter={StaticResource ToUpperConverter}}" />
        </mah:WindowCommands>
    </mah:MetroWindow.RightWindowCommands>
    <mah:MetroWindow.TaskbarItemInfo>
        <TaskbarItemInfo>
            <TaskbarItemInfo.ThumbButtonInfos>
                <ThumbButtonInfo Description="Play/Pause"
                                 ImageSource="{Binding MediaControlModel.IsPaused, Converter={StaticResource BoolToPlayPauseImgConverter}}"
                                 Command="{Binding PlayPauseCommand}" />
            </TaskbarItemInfo.ThumbButtonInfos>
        </TaskbarItemInfo>
    </mah:MetroWindow.TaskbarItemInfo>
    <mah:MetroWindow.InputBindings>
        <KeyBinding Gesture="CTRL+Q" Command="{Binding CloseCommand}" CommandParameter="{Binding ElementName=ThisMainWindow}" />
        <KeyBinding Gesture="CTRL+O" Command="{Binding OpenFileCommand}" />
        <KeyBinding Gesture="CTRL+SHIFT+O" Command="{Binding OpenFolderCommand}" />
        <KeyBinding Gesture="CTRL+S" Command="{Binding SavePlaylistCommand}" />
        <KeyBinding Gesture="CTRL+SPACE" Command="{Binding PlayPauseCommand}" />
        <KeyBinding Gesture="ESCAPE" Command="{Binding MinimizeCommand}" />
    </mah:MetroWindow.InputBindings>
    <mah:MetroWindow.Flyouts>
        <mah:FlyoutsControl>
            <mah:Flyout Header="{x:Static p:Resource.Playlist}" 
                        Position="Right"
                        Width="400"
                        Theme="Adapt"
                        IsOpen="{Binding IsPlayListOpened}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" MinHeight="350" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <controls:PlaylistControl Grid.Row="0"
                                              PlaylistSource="{Binding Playlist}"
                                              SelectedMediaIndex="{Binding SelectedMediaIndex, Mode=OneWayToSource}" 
                                              RepeatMediaCommand="{Binding RepeatMediaCommand}"
                                              DeleteMediaCommand="{Binding DeleteMediaFromPlaylistCommand}"
                                              AddMediaCommand="{Binding AddFileToPlaylistCommand}"
                                              AddFolderCommand="{Binding AddFolderToPlaylistCommand}"
                                              ClearPlaylistCommand="{Binding ClearPlaylistCommand}"
                                              PlaySelectedCommand="{Binding PlaySelectedCommand}"
                                              DragOverItemCommand="{Binding DragOverItemCommand}"
                                              DropItemCommand="{Binding DropItemCommand}"/>
                    <Button Grid.Row="1"
                            Margin="25"
                            Height="25"
                            VerticalAlignment="Bottom" HorizontalAlignment="Center"
                            Content="Open in window"
                            Command="{Binding OpenPlaylistInWindowCommand}"/>
                </Grid>
            </mah:Flyout>
        </mah:FlyoutsControl>
    </mah:MetroWindow.Flyouts>
    <mah:MetroWindow.ContextMenu>
        <ContextMenu>
            <MenuItem Header="{x:Static p:Resource.Player}">
                <MenuItem Header="{x:Static p:Resource.PlayPause}"
                          InputGestureText="Ctrl+Space"
                          Command="{Binding PlayPauseCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Width="15" Height="15" Kind="{Binding MediaControlModel.IsPaused, Converter={StaticResource BoolToPlayPauseKindConverter}}" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="{x:Static p:Resource.NextMedia}"
                          Command="{Binding NextMediaCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Width="15" Height="15" Kind="FastForward" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="{x:Static p:Resource.PrevMedia}"
                          Command="{Binding PreviousMediaCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Width="15" Height="15" Kind="Rewind" />
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="{x:Static p:Resource.Audio}">
                <MenuItem Header="{x:Static p:Resource.Mute}" Command="{Binding MuteCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Width="15" Height="15">
                            <iconPacks:PackIconMaterial.Kind>
                                <MultiBinding Converter="{StaticResource VolumeToVolumeKindConverter}">
                                    <Binding Path="MediaControlModel.Volume" />
                                    <Binding Path="MediaControlModel.IsMuted" />
                                </MultiBinding>
                            </iconPacks:PackIconMaterial.Kind>
                        </iconPacks:PackIconMaterial>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="{x:Static p:Resource.VolumePlus}"
                          Command="{Binding PlusVolumeCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Width="15" Height="15" Kind="VolumePlus" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="{x:Static p:Resource.VolumeMinus}"
                          Command="{Binding MinusVolumeCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Width="15" Height="15" Kind="VolumeMinus" />
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="{x:Static p:Resource.Playlist}">
                <MenuItem Header="{x:Static p:Resource.AddFile}"
                          Command="{Binding AddFileToPlaylistCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Kind="PlaylistPlus" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="{x:Static p:Resource.AddFolder}"
                          Command="{Binding AddFolderToPlaylistCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Kind="FolderPlus" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="{x:Static p:Resource.Clear}"
                          Command="{Binding ClearPlaylistCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Kind="Delete" />
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="{x:Static p:Resource.Repeat}"
                      Command="{Binding RepeatCurrentMediaCommand}">
                <MenuItem.Icon>
                    <iconPacks:PackIconMaterial Kind="{Binding CurrentMedia.IsRepeat, Converter={StaticResource BoolToRepeatIconConverter}}" />
                </MenuItem.Icon>
            </MenuItem>
            <Separator />
            <MenuItem Header="{x:Static p:Resource.Exit}" 
                      InputGestureText="Ctrl+Q"
                      Command="{Binding CloseCommand}" 
                      CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Path=PlacementTarget}">
                <MenuItem.Icon>
                    <iconPacks:PackIconMaterial Kind="ExitRun" />
                </MenuItem.Icon>
            </MenuItem>
        </ContextMenu>
    </mah:MetroWindow.ContextMenu>
    <Grid Background="Black" AllowDrop="True">
        <i:Interaction.Triggers>
            <i:EventTrigger EventName="Drop">
                <i:InvokeCommandAction Command="{Binding DropCommand}" PassEventArgsToCommand="True" />
            </i:EventTrigger>
        </i:Interaction.Triggers>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="*"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
        </Grid.RowDefinitions>
        <Menu Grid.Row="0" Visibility="{Binding MediaControlModel.IsFullscreen, Converter={StaticResource BoolToVisibilityConverter}}">
            <MenuItem Header="{x:Static p:Resource.Media}">
                <MenuItem Header="{x:Static p:Resource.OpenFile}" InputGestureText="Ctrl+O"
                          Command="{Binding OpenFileCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Kind="File" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="{x:Static p:Resource.OpenFolder}" InputGestureText="Ctrl+Shift+O"
                          Command="{Binding OpenFolderCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Kind="FolderOpen" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="{x:Static p:Resource.AddFile}"
                          Command="{Binding AddFileToPlaylistCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Kind="PlaylistPlus" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="{x:Static p:Resource.AddFolder}"
                          Command="{Binding AddFolderToPlaylistCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Kind="FolderPlus" />
                    </MenuItem.Icon>
                </MenuItem>
                <Separator />
                <MenuItem Header="{x:Static p:Resource.OpenPlaylist}" Command="{Binding OpenPlaylistFileCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Kind="PlaylistMusic" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="{x:Static p:Resource.SavePlaylist}" InputGestureText="Ctrl+S"
                          Command="{Binding SavePlaylistCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Kind="ContentSave" />
                    </MenuItem.Icon>
                </MenuItem>
                <Separator />
                <MenuItem Header="{x:Static p:Resource.Exit}" 
                          InputGestureText="Ctrl+Q"
                          Command="{Binding CloseCommand}" 
                          CommandParameter="{Binding ElementName=ThisMainWindow}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Kind="ExitRun" />
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="{x:Static p:Resource.Player}">
                <MenuItem Header="{x:Static p:Resource.PlayPause}"
                          InputGestureText="Ctrl+Space"
                          Command="{Binding PlayPauseCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Width="15" Height="15" Kind="{Binding MediaControlModel.IsPaused, Converter={StaticResource BoolToPlayPauseKindConverter}}" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="{x:Static p:Resource.NextMedia}"
                          Command="{Binding NextMediaCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Width="15" Height="15" Kind="FastForward" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="{x:Static p:Resource.PrevMedia}"
                          Command="{Binding PreviousMediaCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Width="15" Height="15" Kind="Rewind" />
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="{x:Static p:Resource.Audio}">
                <MenuItem Header="{x:Static p:Resource.Mute}" Command="{Binding MuteCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Width="15" Height="15">
                            <iconPacks:PackIconMaterial.Kind>
                                <MultiBinding Converter="{StaticResource VolumeToVolumeKindConverter}">
                                    <Binding Path="MediaControlModel.Volume" />
                                    <Binding Path="MediaControlModel.IsMuted" />
                                </MultiBinding>
                            </iconPacks:PackIconMaterial.Kind>
                        </iconPacks:PackIconMaterial>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="{x:Static p:Resource.VolumePlus}"
                          Command="{Binding PlusVolumeCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Width="15" Height="15" Kind="VolumePlus" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="{x:Static p:Resource.VolumeMinus}"
                          Command="{Binding MinusVolumeCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Width="15" Height="15" Kind="VolumeMinus" />
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="{x:Static p:Resource.Help}">
                <MenuItem Header="{x:Static p:Resource.Help}"
                          Command="{Binding ShowHelpCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Width="15" Height="15" Kind="Help" />
                    </MenuItem.Icon>
                </MenuItem>
                <Separator />
                <MenuItem Header="{x:Static p:Resource.About}"
                          Command="{Binding OpenAboutCommand}">
                    <MenuItem.Icon>
                        <iconPacks:PackIconMaterial Width="15" Height="15" Kind="Information" />
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
        </Menu>
        <MediaElement Grid.Row="1" x:Name="VideoPlayer"
                           LoadedBehavior="Manual"
                           Volume="{Binding MediaControlModel.VolumeToFfmpeg, Mode=TwoWay}"
                           IsMuted="{Binding MediaControlModel.IsMuted, Mode=TwoWay}"
                           UnloadedBehavior="Manual">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MediaOpened">
                    <i:InvokeCommandAction Command="{Binding MediaOpenedCommand}" PassEventArgsToCommand="True" />
                </i:EventTrigger>
                <i:EventTrigger EventName="MediaEnded">
                    <i:InvokeCommandAction Command="{Binding MediaEndedCommand}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </MediaElement>
        <controls:VideoPlayerControl Grid.Row="2" x:Name="VideoPlayerControl"
                                     Height="60" VerticalAlignment="Bottom"
                                     PlaybackEndTime="{Binding MediaControlModel.TotalDuration}"
                                     Position="{Binding MediaControlModel.Position}"
                                     PositionSecond="{Binding MediaControlModel.PositionSeconds, Mode=TwoWay}"
                                     Volume="{Binding MediaControlModel.Volume, Mode=TwoWay}"
                                     IsMuted="{Binding MediaControlModel.IsMuted}"
                                     IsPaused="{Binding MediaControlModel.IsPaused, Mode=TwoWay}"
                                     IsRepeated="{Binding CurrentMedia.IsRepeat}"
                                     PlayPauseCommand="{Binding PlayPauseCommand}"
                                     MaximizeCommand="{Binding MaximizeCommand}"
                                     MuteCommand="{Binding MuteCommand}"
                                     OpenPlaylistCommand="{Binding OpenPlaylistCommand}" 
                                     NextMediaCommand="{Binding NextMediaCommand}"
                                     PrevMediaCommand="{Binding PreviousMediaCommand}"
                                     RepeatCommand="{Binding RepeatCurrentMediaCommand}"
                                     PlayCommand="{Binding PlayCommand}"
                                     PauseCommand="{Binding PauseCommand}"/>
    </Grid>
</mah:MetroWindow>